#version 460 core
#extension GL_ARB_shader_image_load_store : enable
layout (local_size_x = 4, local_size_y = 4, local_size_z = 4) in;
layout (binding = 2, rgba8) writeonly uniform image3D bounceTexture;
layout (binding = 0) uniform sampler3D VoxelTexture;
layout (binding = 1) uniform sampler3D VoxelNormalTexture;


layout(std430, binding = 4) buffer PageFlags {
    uint flags[];
};



uniform vec3 LightDirection;
uniform int VoxelDimensions;
uniform float VoxelGridWorldSize;
uniform sampler2DShadow ShadowMap;
uniform mat4 DepthModelViewProjectionMatrix;

uniform ivec3 DispatchOffset;

const float MAX_DIST = 500.0;
const float ALPHA_THRESH = 0.95;
const int maxLOD = 6;

// 6 60 degree cone
const int NUM_CONES = 6;
vec3 coneDirections[6] = vec3[]
(                            vec3(0, 1, 0),
                            vec3(0, 0.5, 0.866025),
                            vec3(0.823639, 0.5, 0.267617),
                            vec3(0.509037, 0.5, -0.700629),
                            vec3(-0.509037, 0.5, -0.700629),
                            vec3(-0.823639, 0.5, 0.267617)
                            );
float coneWeights[6] = float[](0.25, 0.15, 0.15, 0.15, 0.15, 0.15);


// // 5 90 degree cones
// const int NUM_CONES = 5;
// vec3 coneDirections[5] = vec3[]
// (                            vec3(0, 1, 0),
//                             vec3(0, 0.707, 0.707),
//                             vec3(0, 0.707, -0.707),
//                             vec3(0.707, 0.707, 0),
//                             vec3(-0.707, 0.707, 0)
//                             );
// float coneWeights[5] = float[](0.28, 0.18, 0.18, 0.18, 0.18);


mat3 tangentToWorld;

vec3 createTangent(vec3 n) {
    vec3 tangent;
    if (abs(n.x) < abs(n.y) && abs(n.x) < abs(n.z)) {
        // Create tangent perpendicular to the X-axis
        tangent = vec3(0.0, -n.z, n.y);
    } else if (abs(n.y) <= abs(n.x) && abs(n.y) < abs(n.z)) {
        // Create tangent perpendicular to the Y-axis
        tangent = vec3(-n.z, 0.0, n.x);
    } else {
        // Create tangent perpendicular to the Z-axis
        tangent = vec3(-n.y, 0, n.x);
    }
    return normalize(tangent);
}

vec4 sampleVoxels(vec3 samplePos, float lod) {
    return textureLod(VoxelTexture, samplePos, lod);
}

// Third argument to say how long between steps?
vec4 coneTrace(vec3 direction, float tanHalfAngle, vec3 startPos, out float occlusion) {
    
    // lod level 0 mipmap is full size, level 1 is half that size and so on
    float lod = 0.0;
    vec3 color = vec3(0);
    float alpha = 0.0;
    occlusion = 0.0;

    float scaleFactor = 1.5;

    float voxelWorldSize = (VoxelDimensions / VoxelGridWorldSize);
    float dist = voxelWorldSize; // Start one voxel away to avoid self occlusion
    //startPos = startPos + direction; // Start in the middle of the voxel
    //startPos = startPos + direction * voxelWorldSize; // Plus move away slightly in the normal direction to avoid
                                                                    // self occlusion in flat surfaces
    int steps = 0;
    while(dist < MAX_DIST && alpha < ALPHA_THRESH) {
        // smallest sample diameter possible is the voxel size
        float diameter = max(voxelWorldSize, 2.0 * tanHalfAngle * dist);
        float lodLevel = min(log2(diameter / voxelWorldSize), maxLOD); // where maxLOD is the maximum mipmap level
        vec4 voxelColor = sampleVoxels(startPos + dist * direction, lodLevel);
        if(steps <= 1 && voxelColor.a > 0.5){
            occlusion = 1;
            return vec4(0, 0, 0, 1);
            
        }
        
        float a = (1.0 - alpha);
        // front-to-back compositing
        color += a * voxelColor.rgb * voxelColor.a;
        alpha += a * voxelColor.a;
        //occlusion += a * voxelColor.a;
        occlusion += (a * voxelColor.a) / (1.0 + 0.03 * diameter);
        dist += diameter * 0.5; // smoother

        //dist += diameter; // faster but misses more voxels
        steps++;

    }

    return vec4(color, alpha);
}

vec4 indirectLight(vec3 position,  vec3 normal,  out float occlusion_out) {
    vec4 color = vec4(0);
    occlusion_out = 0.0;
    position = position + normal * VoxelDimensions / VoxelGridWorldSize; // slight offset in the direction of the normal
    //vec3 startPos = position + normal * VoxelDimensions; // slight offset in the direction of the normal

    for(int i = 0; i < NUM_CONES; i++) {
        float occlusion = 0.0;
        // 22.5 degree cones -> tan(22.5/2) = 0.198
        // 60 degree cones -> tan(30) = 0.577
        // 90 degree cones -> tan(45) = 1.0
        color += coneWeights[i] * coneTrace(tangentToWorld * coneDirections[i], 0.577, position , occlusion);
        occlusion_out += coneWeights[i] * occlusion;
    }

    occlusion_out = max(0, 1.0 - occlusion_out);

    return color;
}

vec3 fresnelSchlick(float cosTheta, vec3 F0) {
    return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);
}

void main() {
    ivec3 writePos = ivec3(gl_GlobalInvocationID);
   // int pageIndex = (writePos.z / 32) * (VoxelDimensions / 32) * (VoxelDimensions / 32) + (writePos.y / 32) * (VoxelDimensions / 32) + (writePos.x / 32);

     //if(flags[pageIndex] == 0){
        //imageStore(bounceTexture, writePos, vec4(1, 0, 0, 1));
       // return;
   // }
    vec3 voxelPosition = writePos + DispatchOffset;
    // Fetch the position and depth of the current fragment
    vec4 voxel = texelFetch(VoxelTexture, writePos, 0);

    //currentValue++;
    if(voxel.a < 0.5){
        return;
    }
    
    vec4 voxelNormalInfo = texelFetch(VoxelNormalTexture, writePos, 0);
    float roughness = voxelNormalInfo.a;
    vec3 normal = normalize(voxelNormalInfo.xyz);
    //normal = normal * 2.0 - 1.0;
    
    vec3 tangent = createTangent(normal);
    vec3 bitangent = cross(normal, tangent);
    tangentToWorld = inverse(transpose(mat3(tangent, normal, bitangent)));

    // Calculate shadow


    //vec3 shadowCoords = (DepthModelViewProjectionMatrix * vec4(voxelPosition, 1.0)).xyz;
    //float shadow = texture(ShadowMap, vec3(0.5, 0.5 , 1)).r;

    // Calculate direct light
    //float occlusion2 = 0.0;
    //vec3 directLight = raymarchDirectShadows(voxelPosition, normal, occlusion2).rgb;

    //vec3 E = normalize(EyeDirection_world);
    // Calculate diffuse light

            // Indirect diffuse light
	float occlusion = 0.0;
    vec3 indirectDiffuseLight = indirectLight(voxelPosition, normal, occlusion).rgb;

    indirectDiffuseLight =  indirectDiffuseLight;
    occlusion = min(1,   occlusion)/1; // Make occlusion brighter //new

	// Overwrite currently stored value.
	// TODO: Atomic operations to get an averaged value, described in OpenGL insights about voxelization
	// Required to avoid flickering when voxelizing every frame
    
    if(occlusion < 0.1){
        return;
    }
    imageStore(bounceTexture, writePos, vec4((5*indirectDiffuseLight * occlusion) + voxel.rgb * 1, voxel.a)); //new
    //imageAtomicCompSwap(bounceTexture, writePos, vec4(indirectDiffuseLight * occlusion + voxel.rgb, voxel.a));

    //imageStore(bounceTexture, writePos, vec4(0, 1, 0, 1));

}